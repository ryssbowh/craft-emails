{% import "_includes/forms" as forms %}

{% set emailSettings = craft.app.projectConfig.get('email') %}

{{ actionInput('emails/cp-emails/save-config') }}
{{ forms.textField({
    label: 'Heading'|t('emails'),
    name: 'heading',
    value: email.heading,
    required: true,
    errors: errors['heading'] ?? [],
    id: 'field-heading',
    maxlength: 255,
    fieldClass: 'first'
}) }}
{{ forms.textField({
    label: 'Key'|t('emails'),
    name: 'key',
    value: email.key,
    disabled: email.system == 1,
    warning: (email.id and not email.system) ? 'Changing this may break emails that use this template'|t('emails') : '',
    instructions: email.system ? 'This is a system email and its key cannot be changed'|t('emails') : '',
    errors: errors['key'] ?? [],
    required: true,
    fieldClass: 'first',
    id: 'field-key',
    maxlength: 255
}) }}
{{ forms.textField({
    label: 'Template'|t('emails'),
    name: 'template',
    value: email.template,
    required: true,
    errors: errors['template'] ?? [],
    maxlength: 255
}) }}
{{ forms.lightswitchField({
    label: 'Plain text email'|t('emails'),
    name: 'plain',
    on: email.plain,
    instructions: "Do not use Html for this email's body"|t('emails'),
    id: 'lightswitch-plain'
}) }}
<div id="wysiwyg-field">
    {% if not craft.app.plugins.isPluginEnabled('ckeditor') %}
        <p class="error">{{ 'You must install ckeditor in the settings'|t('emails') }}</p>
    {% else %}
        {% embed '_includes/forms/field.twig' with {
            label: 'CKEditor Config'|t('ckeditor'),
            id: 'cke-config',
        } %}
            {% block input %}
                {% set addOptionFn %}
                    (createOption, selectize) => {
                        const slideout = new Craft.CpScreenSlideout('ckeditor/cke-configs/edit');
                        slideout.on('submit', ev => {
                            debugger;
                            createOption({
                                text: ev.data.name,
                                value: ev.data.uid,
                            });
                        });
                        slideout.on('close', () => {
                            selectize.focus();
                        });
                    }
                {% endset %}

                {% include '_includes/forms/selectize' with {
                    name: 'ckeConfig',
                    options: plugin('ckeditor').ckeConfigs.getAll()|map(ckeConfig => {
                        label: ckeConfig.name,
                        value: ckeConfig.uid,
                    }),
                    addOptionLabel: 'Create a new configâ€¦'|t('ckeditor'),
                    value: email.ckeConfig,
                } %}
            {% endblock %}
        {% endembed %}
    {% endif %}
</div>
{{ forms.textareaField({
    label: 'Instructions'|t('emails'),
    name: 'instructions',
    value: email.instructions,
    instructions: "Instructions for the user writing the email's body, displayed as a tip."|t('emails'),
    errors: errors['instructions'] ?? [],
    maxlength: 500
}) }}
{{ forms.autosuggestField({
    label: 'Email from'|t('emails'),
    type: 'email',
    name: 'from',
    value: email.from,
    suggestEnvVars: true,
    placeholder: emailSettings.fromEmail,
    errors: errors['from'] ?? [],
    maxlength: 255
}) }}
{{ forms.autosuggestField({
    label: 'Name from'|t('emails'),
    name: 'fromName',
    value: email.fromName,
    suggestEnvVars: true,
    placeholder: emailSettings.fromName,
    errors: errors['fromName'] ?? [],
    maxlength: 255
}) }}
{{ forms.autosuggestField({
    label: 'Reply to email'|t('emails'),
    type: 'email',
    name: 'replyTo',
    value: email.replyTo,
    suggestEnvVars: true,
    placeholder: emailSettings.replyToEmail ?? emailSettings.fromEmail,
    errors: errors['replyTo'] ?? [],
    maxlength: 255
}) }}
{{ forms.autosuggestField({
    label: 'Cc'|t('emails'),
    name: 'cc',
    value: email.cc,
    suggestEnvVars: true,
    instructions: 'Comma separated emails'|t('emails'),
    errors: errors['cc'] ?? [],
    maxlength: 255
}) }}
{{ forms.autosuggestField({
    label: 'Bcc'|t('emails'),
    name: 'bcc',
    value: email.bcc,
    suggestEnvVars: true,
    instructions: 'Comma separated emails'|t('emails'),
    errors: errors['bcc'] ?? [],
    maxlength: 255
}) }}
{{ forms.lightswitchField({
    label: 'Save logs'|t('emails'),
    name: 'saveLogs',
    on: email.saveLogs,
    instructions: 'Save logs of sent emails. You will be able to resend emails if this is enabled.'|t('emails'),
    errors: errors['saveLogs'] ?? []
}) }}