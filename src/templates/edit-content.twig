{% extends "_layouts/cp" %}
{% import "_includes/forms" as forms %}
{% do view.registerAssetBundle("craft\\redactor\\assets\\redactor\\RedactorAsset") %}
{% do view.registerAssetBundle("craft\\web\\assets\\prismjs\\PrismJsAsset") %}
{% do view.registerAssetBundle('Ryssbowh\\CraftEmails\\assets\\ContentAssetBundle') %}

{% set tabs = {} %}
{% set title = 'Edit Email Content'|t('emails') %}
{% set fullPageForm = true %}
{% set emailSettings = craft.app.projectConfig.get('email') %}
{% set id = 'field-attachements' %}
{% set name = 'attachements' %}
{% set selectedTab = langId %}
{% set errors = message.errors %}
{% set jsSettings = {
    id: id,
    name: name,
    elementType: 'craft\\elements\\Asset',
    viewMode: 'small',
    prevalidate: false,
    canUpload: true,
    modalSettings: {
        hideSidebar: false
    }
} %}
{% for id, name in emailLocales %}
    {% set tabs = tabs|merge({
        (id): {
            label: name,
            selected: langId == id,
            url: url("emails/edit/" ~ email.id ~ "/" ~ id)
        }
    }) %}
{% endfor %}

{% block toolbar %}
    <a href="{{ url('emails') }}" class="btn back">{{ 'Back'|t('app') }}</a>
    <button type="button" class="js-preview btn">{{ 'Preview'|t('emails') }}</button>
    {% if translatableLocales|length %}
        <button class="btn menubtn" type="button">{{ 'Add translation'|t('emails') }}</button>
        <div class="menu">
            <ul>
                {% for id, name in translatableLocales %}
                    <li><a data-locale="{{ id }}" class="js-add-translation" href="{{ url('emails/edit/' ~ email.id ~ '/' ~ id) }}">{{ name }}</a></li>
                {% endfor %}
            </ul>
        </div>
    {% endif %}
    {% if primaryLanguage != langId %}
        <a href="{{ url('emails/edit/' ~ email.id) }}" data-locale="{{ langId }}" class="js-delete btn submit">{{ 'Delete'|t('emails') }}</a>
    {% endif %}
{% endblock %}

{% block content %}
    {{ actionInput('emails/cp-emails/save-content') }}
    {{ hiddenInput('key', email.key) }}
    {{ hiddenInput('langId', langId) }}
    {{ forms.textareaField({
        label: 'Subject'|t('emails'),
        name: 'subject',
        value: message.subject,
        required: true,
        instructions: 'Subject of the email, twig supported'|t('emails'),
        errors: errors['subject'] ?? [],
        id: 'field-subject',
        fieldClass: 'first'
    }) }}
    {% if email.plain %}
        {{ forms.textareaField({
            label: 'Body'|t('emails'),
            name: 'body',
            value: message.body,
            instructions: 'Body of the email, twig supported'|t('emails'),
            tip: email.instructions,
            required: true,
            errors: errors['body'] ?? [],
            id: 'field-body'
        }) }}
    {% else %}
        {{ forms.field({
            label: 'Body'|t('emails'),
            name: 'body',
            instructions: 'Body of the email, twig supported'|t('emails'),
            tip: email.instructions,
            required: true,
            errors: errors['body'] ?? [],
            id: 'field-body'
            }, message.redactorInput(email.redactorConfig))
        }}
    {% endif %}
    <div class="field last">
        {{ hiddenInput(name, '') }}
        <div class="heading">
            <label>{{ 'Attachements'|t('emails') }}</label>
        </div>
        <div id="{{ id }}" class="elementselect">
            <div class="elements">
                {% for element in attachements %}
                    {% include "_elements/element" with {
                        context: 'field',
                        size: 'small'
                    } %}
                {% endfor %}
            </div>
            <div class="flex">
                {{ tag('button', {
                    type: 'button',
                    text: 'Add an Asset'|t('app'),
                    class: ['btn', 'add', 'icon', 'dashed'],
                    aria: {
                        label: 'Add an Asset'|t('app')
                    },
                }) }}
            </div>
        </div>
    </div>
{% endblock %}

{% js on ready %}
    new Craft.Emails.EmailContent({
        jsSettings: {{ jsSettings|json_encode|raw }},
        langId: '{{ langId }}',
        email: {{ email|json_encode|raw }}
    })
{% endjs %}